library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;


entity processor is
port(
	Clk         : in  std_logic;
	Reset       : in  std_logic;
	-- Instruction memory
	I_Addr      : out std_logic_vector(31 downto 0);
	I_RdStb     : out std_logic;
	I_WrStb     : out std_logic;
	I_DataOut   : out std_logic_vector(31 downto 0);
	I_DataIn    : in  std_logic_vector(31 downto 0);
	-- Data memory
	D_Addr      : out std_logic_vector(31 downto 0);
	D_RdStb     : out std_logic;
	D_WrStb     : out std_logic;
	D_DataOut   : out std_logic_vector(31 downto 0);
	D_DataIn    : in  std_logic_vector(31 downto 0)
);
end processor;

architecture processor_arq of processor is 
--primer etapa
signal PC:std_logic_vector(31 downto 0);--pc
signal PC_Next:std_logic_vector(31 downto 0); --pc+4
signal Dir_Jump:std_logic_vector(31 downto 0); --direccion de salto
signal PCSrc:std_logic; --sel de salto o no, sale de and
signal IF_ID_PC_4:std_logic_vector(31 downto 0); --reg de segm pc+4
signal IF_ID_I_DataIn:std_logic_vector(31 downto 0); --reg de segm tiene la instruccion
signal PC_Mux:std_logic_vector(31 downto 0);

--segunda etapa
signal ID_EX_read_data_1:std_logic_vector(31 downto 0);
signal ID_EX_read_data_2:std_logic_vector(31 downto 0);
signal ID_EX_Inmediato_Extendido:std_logic_vector(31 downto 0);
signal ID_EX_20_16_reg:std_logic_vector(4 downto 0);
signal ID_EX_15_11_reg:std_logic_vector(4 downto 0);
signal ID_EX_WB:std_logic_vector(1 downto 0);
signal ID_EX_M:std_logic_vector(2 downto 0);
signal ID_EX_EX:std_logic_vector(4 downto 0);
signal ID_EX_PC_4:std_logic_vector(31 downto 0);




signal WEB_Write_data:std_logic_vector(31 downto 0);-- resultado del ultimo mux
signal UC_WB:std_logic_vector(1 downto 0);-- se単ales de ctrl para writeback
signal UC_M:std_logic_vector(2 downto 0);-- se単ales de ctrl para memory
signal UC_EX:std_logic_vector(4 downto 0);-- 3+1+1 -- se単ales de ctrl para execute

signal Sign_Extend:std_logic_vector(31 downto 0);


signal read_data_1:STD_LOGIC_VECTOR (31 downto 0);--salida 1 del br
signal read_data_2:STD_LOGIC_VECTOR (31 downto 0);--salida 2 del br

--tercera etapa

signal EX_MEM_WB:std_logic_vector(1 downto 0);
signal EX_MEM_M:std_logic_vector(2 downto 0);
signal EX_MEM_Direccion_Salto:std_logic_vector(31 downto 0);
signal EX_MEM_Resultado_Alu:std_logic_vector(31 downto 0);
signal EX_MEM_Zero:std_logic;
signal EX_MEM_Registro_Escritura:std_logic_vector(4 downto 0);
signal EX_MEM_read_data_2:std_logic_vector(31 downto 0);



signal Direccion_Reg_Escritura:STD_LOGIC_VECTOR (4 downto 0);--salida de un mux que selecciona la direccion de escritura
signal Operacion_Alu:std_logic_vector (2 downto 0);--cable que entra al alu e indica que hacer
signal Resultado_Alu:std_logic_vector (31 downto 0);
signal Zero_Alu:std_logic;
signal Salida_Mux_Alu:std_logic_vector (31 downto 0);--segunda entrada a la alu

--cuarta etapa

signal MEM_WB_WB:std_logic_vector(1 downto 0);
signal MEM_WB_Read_Data:std_logic_vector(31 downto 0);
signal MEM_WB_Resultado_Alu:std_logic_vector(31 downto 0);
signal MEM_WB_Registro_Escritura:std_logic_vector(4 downto 0);

--quinta etapa

component regs 
    Port ( reg1_rd : in STD_LOGIC_VECTOR (4 downto 0);
           reg2_rd : in STD_LOGIC_VECTOR (4 downto 0);
           reg_wr : in STD_LOGIC_VECTOR (4 downto 0);
           data_wr : in STD_LOGIC_VECTOR (31 downto 0);
           wr : in STD_LOGIC;
           clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           data1_rd : out STD_LOGIC_VECTOR (31 downto 0);
           data2_rd : out STD_LOGIC_VECTOR (31 downto 0));
end component;

component alu
   Port ( a : in STD_LOGIC_VECTOR (31 downto 0);
           b : in STD_LOGIC_VECTOR (31 downto 0);
           sel : in STD_LOGIC_VECTOR (2 downto 0);
           result : out STD_LOGIC_VECTOR (31 downto 0);
           zero : out STD_LOGIC);
end component;


begin 	
---primera etapa if 

    PC_Next<=PC+4;
    I_Addr<=PC;
    I_RdStb<='1';
    I_WrStb<='0';
    I_DataOut<=x"00000000";
    


    PC_Mux<=PC_Next when PCSrc='0' else Dir_Jump;
     
     
    process(Clk, Reset)
    begin
        if Reset='1' then
            PC<=x"00000000";
            IF_ID_PC_4<=x"00000000";
            IF_ID_I_DataIn<=x"00000000";
        elsif (rising_edge(Clk)) then
            PC<=PC_Mux;
            IF_ID_PC_4<=PC_Next;
            IF_ID_I_DataIn<=I_DataIn;
        end if;
     end process;
     
-- segunda etapa ID/ex

Banco_Registros:regs port map(
    reset=>reset,
    clk=>clk,
    reg1_rd=>IF_ID_I_DataIn(25 downto 21),--direccion primer registro de lectura
    reg2_rd=>IF_ID_I_DataIn(20 downto 16),--direccion segundo registro de lectura
    reg_wr=>MEM_WB_Registro_Escritura,--direccion de escritura 
    data_wr=>WEB_Write_data,--datos para escribir
    wr=>MEM_WB_WB(0), --wb: memtoreg regwrite
    data1_rd=>read_data_1,
    data2_rd=>read_data_2);
    
    Sign_Extend<=x"0000" & IF_ID_I_DataIn(15 downto 0) when IF_ID_I_DataIn(15)='0' else
        x"ffff" & IF_ID_I_DataIn(15 downto 0);
    
    
    
    process(Clk, Reset) --registro de pipeline ID_EX
    begin
        if Reset='1' then
            ID_EX_read_data_1<=x"00000000";
            ID_EX_read_data_2<=x"00000000";
            ID_EX_Inmediato_Extendido<=x"00000000";
            ID_EX_20_16_reg<="00000";
            ID_EX_15_11_reg<="00000";
            ID_EX_PC_4<=x"00000000";--pc+4
            ID_EX_WB<="00";
            ID_EX_M<="000";
            ID_EX_EX<="00000";
            
         elsif rising_edge(Clk) then
            ID_EX_read_data_1<=read_data_1;
            ID_EX_read_data_2<=read_data_2;
            ID_EX_Inmediato_Extendido<=Sign_Extend;
            ID_EX_20_16_reg<=IF_ID_I_DataIn(20 downto 16);
            ID_EX_15_11_reg<=IF_ID_I_DataIn(15 downto 11);
            ID_EX_PC_4<=IF_ID_PC_4;
            ID_EX_WB<=UC_WB;
            ID_EX_M<=UC_M;
            ID_EX_EX<=UC_EX;
        end if;
    end process;
            
            
     Control: process(IF_ID_I_DataIn)
        begin
            case IF_ID_I_DataIn(31 downto 26) is
            --tomo las se単ales de special de las instrucciones
            --wb: memtoreg regwrite
            --m: memwrite memread saltoBranch
            --ex: regdst alusrc aluop
            
                when "000000"=> --tipo r
                    UC_WB<="01"; --mux en 0 regwrite en 1 
                    UC_M<="000"; --no uso branch y el data memory
                    UC_EX<="10010";--guardo resultado en 15-11 no tomo inm alusrc=0 tipo r 010
                when "100011"=> --lw
                    UC_WB<="11";--mux en 1 leo el datamemory y escribo en br
                    UC_M<="010";-- no escribo, leo, no salto
                    UC_EX<="01000";--guardo en 20-16,  alusrc=1 tomo el inm, 000 para sw
                when "101011"=>--sw
                    UC_WB<="00";--guardo en el data memory no escribo en el br
                    UC_M<="100";--escribo, no leo, no salto
                    UC_EX<="01000";--no escribo en br, alusrc=1 tomo el inm, 000 para lw
                when "000100"=>--beq
                    UC_WB<="00";--salto no escribo en el br
                    UC_M<="001";--no escribo, no leo, salto
                    UC_EX<="00001";--no escribo en br, alusrc=0 tomo del br, 110 para beq
                when "001111"=>--lui
                    UC_WB<="01";--deberia ir el mux en 0 escribo en el br
                    UC_M<="000";--no escribo, no leo, no salto
                    UC_EX<="01111";--0 escribo en 20-16, alusrc=1 tomo el inm, 111 lui
                    --la alu no deberia hacer nada en esta instruccion
                when "001000"=>--addi
                    UC_WB<="01";--mux en 0 regwrite en 1 
                    UC_M<="000";--no escribo, no leo, no salto
                    UC_EX<="01110";--0 escribo en 20-16, alusrc=1 tomo el inm, 000 addi
                when "001100"=>--andi
                    UC_WB<="01";--mux en 0 regwrite en 1 
                    UC_M<="000";--no escribo, no leo, no salto
                    UC_EX<="01100";--0 escribo en 20-16, alusrc=1 tomo el inm, 100 andi
                when "001101"=>--ori
                    UC_WB<="01";--mux en 0 regwrite en 1 
                    UC_M<="000";--no escribo, no leo, no salto
                    UC_EX<="01101";--0 escribo en 20-16, alusrc=1 tomo el inm, 101 ori
                when others=>--otros
                    UC_WB<=(others=>'0');
                    UC_M<=(others=>'0');
                    UC_EX<=(others=>'0');
            end case;
        end process;
 --tercera etapa ex/mem
 
        Direccion_Reg_Escritura<=ID_EX_20_16_reg when
                UC_EX(4)='0' else ID_EX_15_11_reg;
                
        Salida_Mux_Alu<=ID_EX_Inmediato_Extendido when UC_EX(3)='1'
                else ID_EX_read_data_2;
                
        Dir_Jump<=PC_Next+(ID_EX_Inmediato_Extendido(29 downto 0)&"00");
        
        Alu_Control:process(ID_EX_EX,ID_EX_Inmediato_Extendido)
        begin
            case ID_EX_EX(2 downto 0) is
                when "010"=>
                    case ID_EX_Inmediato_Extendido(5 downto 0) is
                        when "100100"=>Operacion_Alu<="000";--and
                        when "100101"=>Operacion_Alu<="001";--or
                        when "100000"=>Operacion_Alu<="010";--add
                        when "100010"=>Operacion_Alu<="110";--sub
                        when "101010"=>Operacion_Alu<="111";--slt
                        when others=>Operacion_Alu<="011";
                    end case;
                when "000" => Operacion_Alu<="010";--lw sw son add
                when "001" => Operacion_Alu<="110";--beq
                when "111" => Operacion_Alu<="100";--lui
                when "110" => Operacion_Alu<="010";--addi
                when "100" => Operacion_Alu<="000";--andi
                when "101" => Operacion_Alu<="001";--ori
                when others=> Operacion_Alu<="011";--otros
            end case;
        end process;
        

        
        Unidad_Aritmetico_Logica: alu port map(
            a=>ID_EX_read_data_1,
            b=> Salida_Mux_Alu,
            sel=>Operacion_Alu,
            result=>Resultado_Alu,
            zero=>Zero_Alu); 
            
        process(Clk, Reset)
        begin
            if Reset='1' then
                EX_MEM_WB<="00";
                EX_MEM_M<="000";
                EX_MEM_Direccion_Salto<=x"00000000";
                EX_MEM_Resultado_Alu<=x"00000000";
                EX_MEM_Zero<='0';
                EX_MEM_Registro_Escritura<="00000";
                EX_MEM_read_data_2<=x"00000000";
            elsif rising_edge(Clk) then
                EX_MEM_WB<=ID_EX_WB;
                EX_MEM_M<=ID_EX_M;
                EX_MEM_Direccion_Salto<=Dir_Jump;
                EX_MEM_Resultado_Alu<=Resultado_Alu;
                EX_MEM_Zero<=Zero_Alu;
                EX_MEM_Registro_Escritura<=Direccion_Reg_Escritura;
                EX_MEM_read_data_2<=ID_EX_read_data_2;
            end if;
        end process;
                
                
 --cuarta etapa ex/mem

       
        process(Clk, Reset)
        begin
            if Reset='1' then
                MEM_WB_WB<="00";
                MEM_WB_Read_Data<=x"00000000";
                MEM_WB_Resultado_Alu<=x"00000000";
                MEM_WB_Registro_Escritura<="00000";
            elsif rising_edge(Clk) then
                MEM_WB_Registro_Escritura<=EX_MEM_Registro_Escritura;
                MEM_WB_WB<=EX_MEM_WB;
                MEM_WB_Read_Data<=D_DataIn;
                MEM_WB_Resultado_Alu<=EX_MEM_Resultado_Alu;
            end if;
        end process;
        
       PCSrc<=EX_MEM_Zero and EX_MEM_M(0);
       D_Addr<= EX_MEM_Resultado_Alu;     
	   D_RdStb <= EX_MEM_M(1);   
	   D_WrStb <= EX_MEM_M(2);
	   D_DataOut<= EX_MEM_read_data_2;
	   
--quinta etapa wb

	   WEB_Write_data<=MEM_WB_Read_Data when MEM_WB_WB(1)='1'
	        else MEM_WB_Resultado_Alu;
	    
        
        
end processor_arq;
	    
        
